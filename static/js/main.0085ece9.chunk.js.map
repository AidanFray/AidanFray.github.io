{"version":3,"sources":["components/projectcard.jsx","components/githubcalendar.jsx","components/typingelement.jsx","components/landingpage.jsx","App.jsx","index.jsx"],"names":["ProjectCard","languages","langauges_logos","text","undefined","parts","split","i","length","lang","x","this","trim","push","react_default","a","createElement","style","fontSize","padding","class","languages_proc","props","className","lib","shadow","minWidth","height","margin","visibility","visible","alignItems","color","text_color","width","background","url","title","id","overflow","card_text","border","colored","href","github_url","Component","availableThemes","today","Date","yearAgo","date","numDays","newDate","setDate","getDate","shiftDate","formatDate","year","getFullYear","month","getMonth","day","concat","GithubCalendar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","currentTheme","console","log","state","submissions","count","display","theme","requestContributions","_this2","fetch","then","r","t","createSubmissionList","JSON","parse","catch","error","setState","list","c","contributions","s","todayIndex","todayStr","_this3","react_calendar_heatmap_umd_default","showWeekdayLabels","startDate","endDate","values","classForValue","value","tooltipDataAttrs","data-tip","dist_default","TypingElement","words","typing_delay","typing_backspace","rnd","Math","floor","random","tmp","shuffle_list","words_to_type","print_text","react_typing_animation_dist_default","Delay","ms","Backspace","loop","Landing","col","typingelement","githubcalendar","projectcard","App","landingpage","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0085ece9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardTitle, CardText, CardActions, Button, CardMenu} from 'react-mdl';\n\n\nclass ProjectCard extends Component {\n\n  languages =\n  [\n    [\"C++\", \"devicon-cplusplus-plain\"],\n    [\"Java\", \"devicon-java-plain\"],\n    [\"Python\", \"devicon-python-plain\"],\n    [\"C#\", \"devicon-csharp-plain\"],\n    [\"JS\", \"devicon-javascript-plain\"],\n    [\"HTML5\", \"devicon-html5-plain\"],\n    [\"Android\", \"devicon-android-plain\"],\n    [\"Linux\", \"devicon-linux-plain\"],\n    [\"iOS\", \"devicon-apple-original\"],\n    [\"Windows\", \"devicon-windows8-original\"]\n  ]\n\n  langauges_logos = []\n\n  // Creates a list of programming langauges dynamically that\n  // can be used to show what project tech was used\n  languages_proc(text) {\n    var sentence = text;\n\n    if (text !== undefined) {\n      var parts = sentence.split(\",\");\n\n      for (var i = 0; i < parts.length; i++) {\n        var lang = parts[i];\n\n        for (var x = 0; x < this.languages.length; x++) {\n          if (this.languages[x][0].trim() === lang) {\n            this.langauges_logos.push(<i style={{fontSize: \"25px\", padding: \"2px\"}} class={this.languages[x][1]}></i>);\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    this.languages_proc(this.props.languages)\n    return (\n      <div className=\"project-item\">\n        <Card shadow={2} style={{minWidth: '250px', height: '400px', margin: 'auto', visibility: this.props.visible}}>\n\n          <CardTitle style={{alignItems: 'flex-start', color: this.props.text_color, height: '200px', width: '330px', background: 'url('+ this.props.url +') center / cover'}}>\n            <div className=\"card-title\">\n              {this.props.title}\n            </div>\n          </CardTitle>\n\n          <CardText id=\"centerXY\" style={{height: '100px', overflow: 'auto'}}>\n            <div className=\"card-text\">\n              {this.props.card_text}\n            </div>\n          </CardText>\n\n          <CardActions border>\n            {this.langauges_logos}\n          </CardActions>\n\n          <CardActions border style={{alignItems: 'flex-end'}}>\n            <Button colored href={this.props.github_url}>GitHub</Button>\n          </CardActions>\n\n          <CardMenu style={{color: this.props.text_color}}>\n          </CardMenu>\n      </Card>\n    </div>\n  )\n}\n}\n\nexport default ProjectCard;\n","import React, { Component } from \"react\";\nimport CalendarHeatmap from \"react-calendar-heatmap\";\nimport \"react-calendar-heatmap/dist/styles.css\";\nimport ReactTooltip from \"react-tooltip\";\n\n\nconst availableThemes = [\n  \"github\",\n  \"halloween\",\n  \"dracula\"\n]\n\nconst today = new Date();\n\nconst yearAgo = shiftDate(today, -364);\n\n// Moves a set date back or forwards\nfunction shiftDate(date, numDays) {\n  var newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\n\n// Turn date object into a formatted string\nfunction formatDate(date) {\n  // For some reason date.getMonth() is a scale of 0 -> 11\n  // Therefore +1 is needed for correct formatting\n\n  var year = date.getFullYear();\n\n  // Padds the month and day\n  var month = date.getMonth() + 1;\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  var day = date.getDate();\n  if (day < 10) {\n    day = \"0\" + day;\n  }\n\n  return `${year}-${month}-${day}`;\n}\n\nclass GithubCalendar extends Component {\n  constructor(props) {\n    super(props);\n\n    var currentTheme = availableThemes[0]\n\n    console.log(today.getDate())\n\n    // If it's halloween, the colour scheme changes\n    if (today.getMonth() + 1 == 10 && today.getDate() == 31) {\n      currentTheme = availableThemes[1]\n    }\n\n    this.state = {\n      submissions: [{ date: formatDate(today), count: \"4\" }],\n      display: \"\",\n      theme: currentTheme\n    };\n    this.requestContributions();\n  }\n\n  // Sends a request to the API to request a JSON objects of contributions\n  requestContributions() {\n    var url = \"https://github-contributions-api.now.sh/v1/AidanFray\";\n    var r = fetch(url)\n      .then(r => r.text())\n      .then(t => this.createSubmissionList(JSON.parse(t)))\n      .catch(error => {\n        console.log(\"[Github Contributions API] \" + error);\n\n        //Hides the element if there is a network issue\n        this.setState({\n          display: \"none\"\n        });\n      });\n  }\n\n  // Uses the JSON list of contributions to create a formatted list\n  createSubmissionList(list) {\n    var c = list.contributions;\n\n    var s = [];\n\n    //Find today's date index\n    var todayIndex = 0;\n    var todayStr = formatDate(today);\n\n    //Gets today's index\n    for (var i = 0; i < c.length; i++) {\n      if (c[i].date === todayStr) {\n        todayIndex = i;\n        break;\n      }\n    }\n\n    for (var i = 0; i < 365; i++) {\n      s.push({\n        date: c[todayIndex + i].date,\n        count: c[todayIndex + i].count\n      });\n    }\n\n    //Adds the submission list and displays the element\n    this.setState({\n      submissions: s,\n      display: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"75%\", margin: \"auto\", display: this.state.display}}\n      >\n        <CalendarHeatmap\n          showWeekdayLabels=\"true\"\n          startDate={yearAgo}\n          endDate={today}\n          values={this.state.submissions}\n          classForValue={value => {\n            var count = 0;\n            if (value != null) {\n\n              // Max value\n              if (value.count > 4) {\n                count = 4;\n              } else {\n                count = value.count;\n              }\n            }\n\n            return `${this.state.theme}-color-scale-${count}`;\n          }}\n          tooltipDataAttrs={value => {\n            var count = 0;\n            if (value.count !== null) {\n              count = value.count;\n            }\n\n            return {\n              \"data-tip\": `${value.date} - Contributions: ${count}`\n            };\n          }}\n        />\n        <ReactTooltip />\n      </div>\n    );\n  }\n}\n\nexport default GithubCalendar;\n","import React, { Component } from 'react';\nimport Typing from 'react-typing-animation';\n\nclass TypingElement extends Component {\n\n  // New words to be placed here to be typed onto the screen\n  words =\n  [\n    //<Name>   <Color>\n    [\"Python\", \"\"],\n    [\".NET\", \"\"],\n    [\"Wireshark\", \"\"],\n    [\"Arch Linux\", \"\"],\n    [\"C++\", \"\"],\n    [\"Java\", \"\"],\n    [\"TeX\", \"\"]\n  ];\n  typing_delay = 3000;\n  typing_backspace = 20;\n\n  shuffle_list() {\n    for (var i = 0; i < this.words.length; i++) {\n\n      // Randomises the list swap position\n      var rnd = Math.floor((Math.random() * this.words.length));\n\n      var tmp = this.words[i];\n      this.words[i] = this.words[rnd];\n      this.words[rnd] = tmp;\n    }\n  }\n\n  print_text(text, color) {\n    return(\n      <h1 className=\"typing-text\" style={{color: color}}>{text}</h1>\n    )\n  }\n\n  render() {\n    this.shuffle_list();\n\n    var words_to_type = [];\n\n    // Dynamically creates the typing formatted code\n    for (var i = 0; i < this.words.length; i++) {\n      words_to_type.push(\n        <span>\n          {this.print_text(this.words[i][0], this.words[i][1])}\n          <Typing.Delay ms={this.typing_delay} />\n          <Typing.Backspace count={this.typing_backspace} />\n        </span>\n      )\n    }\n\n    return(\n      <div>\n        <Typing loop={true}>\n            {words_to_type}\n        </Typing>\n      </div>)\n    }\n  }\n\n  export default TypingElement;\n","import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl';\nimport ProjectCard from './projectcard';\nimport GithubCalendar from './githubcalendar';\nimport TypingElement from './typingelement'\n\n///\n/// First page that the web app will arrive to\n///\n\nclass Landing extends Component {\n\n  render() {\n    return(\n      <div>\n        <Grid className=\"landing-grid\">\n          <Cell col={12}>\n            <h1 className=\"title\">Aidan Fray</h1>\n            <TypingElement/>\n          </Cell>\n          <Cell col={12}>\n            <GithubCalendar/>\n\n            <div id=\"limit\" className=\"projects-grid\">\n              <ProjectCard\n                title = \"Dissertation Project\"\n                text_color = '#fff'\n                url=\"https://s15.postimg.cc/ghwy5traz/diss_proj.png\"\n                card_text=\"Compromised and Degraded Network Simulation - The aim of the dissertation project was to create a custom simulated network that can demonstrate and visualise network degradation and common DoS attacks.\n                It uses the NetFilter section of the Linux Kernel to filter and manipulate network packets.\"\n                languages=\"Python,Linux\"\n                github_url=\"https://github.com/AidanFray/Dissertation-Project\"/>\n\n              <ProjectCard\n                title = \"Scale Generator\"\n                text_color = '#000'\n                url=\"https://raw.githubusercontent.com/AidanFray/gh-pages-portfolio/master/src/project_images/scale_logo.png\"\n                card_text=\"An application that is designed to randomly provide scales for practising musicians. This app is produced using Xamarin to proivde a cross platform application for iOS and Android.\"\n                languages=\"C#,Android,iOS\"\n                github_url=\"https://github.com/AidanFray/ScaleGenerator-iOS_Andriod\"/>\n\n              <ProjectCard\n                title = \"3D Graphics\"\n                text_color = '#fff'\n                url=\"https://raw.githubusercontent.com/AidanFray/gh-pages-portfolio/master/src/project_images/3d_sim.png\"\n                card_text=\"A university graphics and simulation project where the aim was to simulate various numbers of spheres falling through a column.\"\n                languages=\"C#\"\n                github_url=\"https://github.com/AidanFray/Simulation-and-3D-Graphics\"/>\n\n              <ProjectCard\n                title = \"Interactive Map of Hull\"\n                text_color = '#c024fe'\n                url=\"https://raw.githubusercontent.com/AidanFray/gh-pages-portfolio/master/src/project_images/interactive_map.png\"\n                card_text=\"A Javascript interactive map of Hull to celebrate the City of Culture.\"\n                languages=\"JS,HTML5\"\n                github_url=\"https://github.com/AidanFray/Interactive_Map\"/>\n\n              <ProjectCard\n                title = \"University Timetable Scraper\"\n                text_color = '#fff'\n                url=\"https://raw.githubusercontent.com/AidanFray/gh-pages-portfolio/master/src/project_images/hull_logo.png\"\n                card_text=\"Program that web scrapes the https://timetable.hull.ac.uk/ website to sync your timetable with outlook\"\n                languages=\"C#\"\n                github_url=\"https://github.com/AidanFray/Hull_Timetable_To_Outlook\"/>\n\n              <ProjectCard\n                  title = \"Sliding Tiles\"\n                  text_color = '#fff'\n                  url=\"https://raw.githubusercontent.com/AidanFray/gh-pages-portfolio/master/src/project_images/mobile_logo.png\"\n                  card_text=\"Sliding puzzle coursework submitted for a university mobile devices module. The goal was to create a small sliding puzzle game with dynamically download puzzles.\"\n                  languages=\"Java,Android\"\n                  github_url=\"https://github.com/AidanFray/Mobile_Devices_And_Applications\"/>\n\n              {/* <ProjectCard visible = \"hidden\"/> */}\n              \n            </div>\n          </Cell>\n        </Grid>\n      </div>\n      )\n    }\n  }\n\n        export default Landing;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Layout, Navigation, Drawer, Content } from \"react-mdl\";\nimport LandingPage from \"./components/landingpage\";\nimport { Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n        <Layout>\n          {/* Side panel navigation */}\n          {/* <Drawer\n            title={\n              <Link style={{ textDecoration: \"none\", color: \"#000\" }} to=\"/\">\n                Menu\n              </Link>\n            }\n          >\n            </Drawer> */}\n          <Content>\n            <LandingPage />\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Themes.css'\nimport App from './App';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n<App />\n  </BrowserRouter>\n  , document.getElementById('root'));\n"],"sourceRoot":""}